{"version":3,"sources":["components/PaymentMethod/index.js","components/PaymentCard/index.js","components/PaymentWidget/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","Alert","PaymentMethodWrapper","PaymentMethodLabel","PaymentMethod","isLoading","paymentMethods","selectedMethod","onChangeMethod","CircularProgress","length","map","method","onChange","key","id","onClick","Radio","color","checked","value","name","inputProps","src","img_url","alt","renderPaymentMethod","PaymentCard","Paper","Button","variant","StyledContainer","Container","StyledPaper","PaymentWidget","amount","useState","selectedCountry","setCountry","setLoadingStatus","setPaymentMethods","setSelectedMethod","useEffect","getCountry","countryCode","a","fetch","res","ok","json","data","maxWidth","TextField","select","label","e","target","SelectProps","native","helperText","countryCodes","country","code","methodId","GlobalStyle","createGlobalStyle","App","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b27e53d5.chunk.js","sourcesContent":["import React from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport styled from 'styled-components';\r\nimport Radio from '@material-ui/core/Radio';\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 20px 0;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: space-around;\r\n`\r\n\r\nconst Alert = styled.div`\r\n    border-left: 3px solid red;\r\n    background: rgba(255, 0, 0, .4);\r\n    padding: 10px 0px 10px 30px;\r\n    text-align: left;\r\n`\r\n\r\nconst PaymentMethodWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 160px;\r\n    border: 2px solid #3f51b5;\r\n    border-radius: 20px;\r\n    margin: 10px 0;\r\n    height: 80px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n`\r\n\r\nconst PaymentMethodLabel = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    & > span {\r\n        font-weight: bold;\r\n        font-size: 16px;\r\n    }\r\n`\r\n\r\nconst PaymentMethod = ({ isLoading, paymentMethods, selectedMethod, onChangeMethod }) => {\r\n    const renderPaymentMethod = (method, selectedMethod, onChange) => {\r\n        return (\r\n            <PaymentMethodWrapper key={method.id} onClick={onChange(method.id)}>\r\n                <Radio\r\n                    color=\"primary\"\r\n                    checked={selectedMethod === method.id}\r\n                    value={method.id}\r\n                    name={`radio-button-${method.id}`}\r\n                    inputProps={{ 'aria-label': method.id }}\r\n                />\r\n                <PaymentMethodLabel>\r\n                    <img src={method.img_url} alt={`${method.name} logo`} />\r\n                    <span>{method.name}</span>\r\n                </PaymentMethodLabel>\r\n            </PaymentMethodWrapper>\r\n        )\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (<Wrapper><CircularProgress /></Wrapper>)\r\n    }\r\n\r\n    if (!isLoading && paymentMethods && paymentMethods.length === 0) {\r\n        return(\r\n            <Wrapper>\r\n                <Alert>\r\n                    We are sorry, but we are not provide payment methods for that country\r\n                </Alert>\r\n            </Wrapper>\r\n        )\r\n    }\r\n\r\n    if (paymentMethods) {\r\n        return (\r\n            <Wrapper>\r\n                { paymentMethods.map(method => renderPaymentMethod(method, selectedMethod, onChangeMethod))}\r\n            </Wrapper>\r\n        )\r\n    }\r\n    \r\n    return null\r\n}\r\n\r\nexport default PaymentMethod;","import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst PaymentCard = () => (\r\n    <form>\r\n        <Paper>\r\n            \r\n        </Paper>\r\n        <Button variant=\"contained\" color=\"primary\">Submit</Button>\r\n    </form>\r\n);\r\n\r\nexport default PaymentCard;","import React, { useState, useEffect } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport styled from 'styled-components';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PropTypes from 'prop-types';\r\nimport countryCodes from '../../country_codes.json';\r\nimport PaymentMethod from '../PaymentMethod';\r\nimport PaymentCard from '../PaymentCard';\r\n\r\nconst StyledContainer = styled(Container)`\r\n    text-align: center;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst StyledPaper = styled(Paper)`\r\n    width: 100%;\r\n    padding: 20px;\r\n`\r\n\r\nconst PaymentWidget = ({ amount }) => {\r\n    const [selectedCountry, setCountry] = useState('UA');\r\n    const [isLoading, setLoadingStatus] = useState(false);\r\n    const [paymentMethods, setPaymentMethods] = useState(null);\r\n    const [selectedMethod, setSelectedMethod] = useState(null)\r\n\r\n    useEffect(() => {\r\n        getCountry(selectedCountry)\r\n    }, [selectedCountry])\r\n\r\n    const handleChangeMethod = (methodId) => () => {\r\n        setSelectedMethod(methodId);\r\n    }\r\n\r\n    async function getCountry(countryCode) {\r\n        setLoadingStatus(true);\r\n        setPaymentMethods(null);\r\n        const res = await fetch(`https://api.paymentwall.com/api/payment-systems/?key=b1ace6cb384e25a222a0da24e62167a1&country_code=${countryCode}`);\r\n        if (res.ok) {\r\n            const data = await res.json();\r\n            setPaymentMethods(data ? data : []);\r\n        }\r\n        setLoadingStatus(false)\r\n    }\r\n\r\n    return (\r\n        <StyledContainer maxWidth=\"xs\">\r\n            <StyledPaper>\r\n                <h1>Payment Test Task</h1>\r\n                <h2>Price: { amount }</h2>\r\n                <TextField\r\n                    select\r\n                    label=\"Country\"\r\n                    onChange={(e) => setCountry(e.target.value)}\r\n                    value={selectedCountry}\r\n                    SelectProps={{\r\n                        native: true,\r\n                    }}\r\n                    helperText=\"Please select your country\"\r\n                    variant=\"outlined\"\r\n                >\r\n                    { countryCodes.map(country => <option key={country.code} value={country.code}>{country.name}</option>) }\r\n                </TextField>    \r\n                <PaymentMethod \r\n                    isLoading={isLoading} \r\n                    paymentMethods={paymentMethods} \r\n                    onChangeMethod={handleChangeMethod} \r\n                    selectedMethod={selectedMethod} \r\n                />\r\n                { selectedMethod &&\r\n                    <PaymentCard />\r\n                }\r\n            </StyledPaper>\r\n        </StyledContainer>\r\n    );\r\n}\r\n\r\nPaymentWidget.propTypes = {\r\n    amount: PropTypes.string,\r\n}\r\n\r\nexport default PaymentWidget;","import React, { Fragment } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport PaymentWidget from '../PaymentWidget';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100vh;\r\n    }\r\n\r\n    body {\r\n        height: 100%;\r\n\r\n        #root {\r\n            height: 100%;\r\n        }\r\n    }\r\n`\r\n\r\nconst App = () => (\r\n    <Fragment>\r\n        <CssBaseline />\r\n        <GlobalStyle />\r\n        <PaymentWidget amount=\"5 USD\" />\r\n    </Fragment>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}