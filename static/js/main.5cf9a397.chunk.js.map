{"version":3,"sources":["components/PaymentCard/images/card_back.jpg","components/PaymentMethod/index.js","components/PaymentCard/index.js","containers/PaymentCard/index.js","components/PaymentWidget/index.js","containers/PaymentWidget/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","div","List","Alert","PaymentMethodWrapper","PaymentMethodLabel","Label","FormHelperText","StyledCircularProgress","CircularProgress","PaymentMethod","isLoading","paymentMethods","selectedMethod","onChangeMethod","length","error","map","method","onChange","key","id","onClick","Radio","color","checked","value","name","inputProps","src","img_url","alt","renderPaymentMethod","CreditCard","Paper","cardBack","StyledTextField","TextField","Row","Grid","Logo","img","PaymentCard","card","logo","onBlurCardField","onChangeCardField","onSubmit","btnText","elevation","container","direction","item","xs","placeholder","onBlur","cardNumber","replace","helperText","className","expDate","cvv","toUpperCase","Button","type","variant","PaymentCardContainer","useState","setCardData","validator","isNaN","split","reverse","digit","Number","reduce","acc","curr","index","modValue","Date","slice","match","validateField","target","cleanDate","changedNumber","e","preventDefault","cardState","isValid","Object","entries","forEach","validateForm","StyledContainer","Container","StyledPaper","PaymentWidget","selectedCountry","price","onCountryChange","isPaymentMethodsLoading","onSubmitForm","maxWidth","select","label","SelectProps","native","countryCodes","country","code","undefined","propTypes","amount","PropTypes","number","currency","string","PaymentWidgetContainer","setCountry","setPaymentMethodsLoadingStatus","setPaymentMethods","setSelectedMethod","useEffect","getCountry","countryCode","a","fetch","res","ok","json","data","GlobalStyle","createGlobalStyle","App","CssBaseline","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5cf9a397.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card_back.a22584f2.jpg\";","import React from 'react'\nimport PropTypes from 'prop-types'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport styled from 'styled-components'\nimport Radio from '@material-ui/core/Radio'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\nconst Wrapper = styled.div`\n    margin: 32px 0;\n    position: relative;\n    min-height: 140px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`\n\nconst List = styled.div`\n    display: flex;\n    flex-wrap: nowrap;\n    overflow-y: auto;\n`\n\nconst Alert = styled.div`\n    border-left: 3px solid red;\n    background: rgba(255, 0, 0, .4);\n    padding: 10px 0px 10px 30px;\n    text-align: left;\n`\n\nconst PaymentMethodWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    border: 2px solid #a9a9a9;\n    border-radius: 20px;\n    margin: 10px 5px;\n    height: 80px;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n`\n\nconst PaymentMethodLabel = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 135px;\n\n    & > span {\n        font-weight: bold;\n        font-size: 16px;\n    }\n`\n\nconst Label = styled(FormHelperText)`\n    position: absolute;\n    top: -12px;\n    left: 0;\n`\n\nconst StyledCircularProgress = styled(CircularProgress)`\n    margin: 0 auto;\n`\n\nconst PaymentMethod = ({ isLoading, paymentMethods, selectedMethod, onChangeMethod }) => {\n    const renderPaymentMethod = (method, selectedMethod, onChange) => {\n        return (\n            <PaymentMethodWrapper key={method.id} onClick={onChange(method)}>\n                <Radio\n                    color=\"primary\"\n                    checked={selectedMethod.value && selectedMethod.value.id === method.id}\n                    name={`radio-button-${method.id}`}\n                    inputProps={{ 'aria-label': method.id }}\n                />\n                <PaymentMethodLabel>\n                    <img src={method.img_url} alt={`${method.name} logo`} />\n                    <span>{method.name}</span>\n                </PaymentMethodLabel>\n            </PaymentMethodWrapper>\n        )\n    }\n\n    if (isLoading) {\n        return (<Wrapper><StyledCircularProgress /></Wrapper>)\n    }\n\n    if (!isLoading && paymentMethods && paymentMethods.length === 0) {\n        return(\n            <Wrapper>\n                <Alert>\n                    We are sorry, but we are not provide payment methods for that country\n                </Alert>\n            </Wrapper>\n        )\n    }\n\n    if (paymentMethods) {\n        return (\n            <Wrapper>\n                <Label error={selectedMethod.error}>Payment method *</Label>\n                <div>\n                    <List>\n                        { paymentMethods.map(method => renderPaymentMethod(method, selectedMethod, onChangeMethod))}\n                    </List>\n                </div>\n                <FormHelperText error={selectedMethod.error}>Please choose your payment method</FormHelperText>\n            </Wrapper>\n        )\n    }\n    \n    return null\n}\n\nPaymentMethod.propTypes = {\n    isLoading: PropTypes.bool,\n    onChangeMethod: PropTypes.func,\n    paymentMethods: PropTypes.array,\n    selectedMethod: PropTypes.object,\n}\n\nexport default PaymentMethod;","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Grid from '@material-ui/core/Grid'\nimport styled from 'styled-components'\nimport cardBack from './images/card_back.jpg'\n\nconst CreditCard = styled(Paper)`\n    padding: 0 20px;\n    background: url(${cardBack}) 100% 100% no-repeat;\n    height: 228px;\n    background-size: cover;\n    border-radius: 10px;\n    margin-bottom: 20px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`\n\nconst StyledTextField = styled(TextField)`\n    .credit_card {\n        text-align: center;\n        font-weight: bold;\n        font-family: 'Share Tech Mono', monospace;\n        font-size: 16px;\n\n        &.number_input {\n            font-size: 20px;\n        }\n    }\n`\n\nconst Row = styled(Grid)`\n    min-height: 70px;\n    justify-content: space-between;\n    align-items: center;\n`\n\nconst Logo = styled.img`\n    width: 100%;\n`\n\nconst PaymentCard = ({ card, logo, onBlurCardField, onChangeCardField, onSubmit, btnText }) => (\n    <form onSubmit={onSubmit}>\n        <CreditCard elevation={3}>\n            <Grid container direction=\"column\">\n                <Row item container>\n                    <Grid item xs={12}>\n                        <StyledTextField\n                            placeholder=\"0000 0000 0000 0000\"\n                            onChange={onChangeCardField}\n                            onBlur={onBlurCardField}\n                            name=\"cardNumber\"\n                            value={card.cardNumber.value.replace(/\\d{4}(?=.)/g, '$& ')}\n                            helperText={card.cardNumber.error ? card.cardNumber.error : 'Card number'}\n                            error={card.cardNumber.error && card.cardNumber.error !== null}\n                            inputProps={{\n                                className: 'credit_card number_input'\n                            }}\n                        />\n                    </Grid>\n                </Row>\n                <Row item container>\n                    <Grid item xs={5}>\n                        <StyledTextField\n                            placeholder=\"12/22\"\n                            onChange={onChangeCardField}\n                            onBlur={onBlurCardField}\n                            name=\"expDate\"\n                            value={card.expDate.value ? card.expDate.value.replace(/\\d{2}(?=.)/g, '$&/') : ''}\n                            helperText={card.expDate.error ? card.expDate.error : 'Exp date'}\n                            error={card.expDate.error && card.expDate.error !== null}\n                            inputProps={{\n                                className: 'credit_card expDate_input'\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={5}>\n                        <StyledTextField\n                            placeholder=\"432\"\n                            onChange={onChangeCardField}\n                            onBlur={onBlurCardField}\n                            name=\"cvv\"\n                            value={card.cvv.value}\n                            helperText={card.cvv.error ? card.cvv.error : 'CVV'}\n                            error={card.cvv.error && card.cvv.error !== null}\n                            inputProps={{\n                                className: 'credit_card cvv_input'\n                            }}\n                        />\n                    </Grid>\n                </Row>\n                <Row item container>\n                    <Grid item xs={6}>\n                        <StyledTextField\n                            placeholder=\"YOUR NAME\"\n                            onChange={onChangeCardField}\n                            onBlur={onBlurCardField}\n                            name=\"name\"\n                            value={card.name.value.toUpperCase()}\n                            helperText={card.name.error ? card.name.error : 'Cardholder name'}\n                            error={card.name.error && card.name.error !== null}\n                            inputProps={{\n                                className: 'credit_card name_input'\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={4}>\n                        {logo &&\n                            <Logo src={logo} alt=\"credit card logo\" />\n                        }\n                    </Grid>\n                </Row>\n            </Grid>\n        </CreditCard>\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Pay {btnText}</Button>\n    </form>\n);\n\nPaymentCard.propTypes = {\n    btnText: PropTypes.string,\n    card: PropTypes.object,\n    logo: PropTypes.string,\n    onBlurCardField: PropTypes.func,\n    onChangeCardField: PropTypes.func,\n    onSubmit: PropTypes.func,\n}\n\nexport default PaymentCard;","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport PaymentCard from '../../components/PaymentCard'\n\nconst PaymentCardContainer = ({ logo, onSubmit, btnText }) => {\n    const [card, setCardData] = useState({\n        name: {\n            value: '',\n            error: null,\n        },\n        cardNumber: {\n            value: '',\n            error: null,\n        },\n        expDate: {\n            value: '',\n            error: null,\n        },\n        cvv: {\n            value: '',\n            error: null,\n        },\n    })\n\n    const validator = (name, value) => {\n        switch (name) {\n            case 'cardNumber':\n                if (!isNaN(value)) {\n                    const arrayOfDigits = value.split('').reverse().map(digit => Number(digit));\n                    const sum = arrayOfDigits.reduce((acc, curr, index) => {\n                        if (index % 2 !== 0) {\n                            const modValue = curr * 2\n                            return modValue > 9 ? acc + modValue - 9 : acc + modValue\n                        } else {\n                            return acc + curr\n                        }\n                    })\n                    return sum % 10 !== 0 ? 'Cardnumber is not valid' : null\n                } else {\n                    return 'Only digits allowed'\n                }\n            case 'expDate':\n                if (isNaN(value) || new Date('20' + value.slice(2), value.slice(0, 2) - 1) < new Date()) {\n                    return 'Exp. date incorrect'\n                }\n                return null\n            case 'cvv':\n                return isNaN(value) ? 'Only digits' : null\n            case 'name':\n                return value.match(/^[A-Za-z ]+$/) ? null : 'Only characters allowed'\n            default:\n                return null\n        }\n    }\n\n    const validateForm = () => {\n        const cardState = { ...card }\n        let isValid = true\n        Object.entries(card).forEach(([key, value]) => {\n            const error = validateField(key)\n            if (error) {\n                isValid = false\n            }\n            cardState[key] = { ...value, error }\n        })\n        setCardData(cardState)\n        return isValid\n    }\n\n    const validateField = (key) => {\n        return card[key].value !== '' ? validator(key, card[key].value) : 'Required'\n    }\n\n    const handleBlurCardField = ({ target: { name } }) => {\n        const error = validateField(name)\n        setCardData({...card, [name]: { ...card[name], error } })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (validateForm()) {\n            onSubmit({\n                name: card.name.value,\n                cvv: card.cvv.value,\n                expDate: card.expDate.value,\n                cardNumber: card.cardNumber.value,\n            })\n        }\n    }\n\n    const handleChangeCardField = ({ target: { name, value } }) => {\n        if (name === 'expDate') {\n            if (value.length <= 5) {\n                const cleanDate = value.replace('/', '')\n                setCardData({ ...card, [name]: { value: cleanDate, error: cleanDate !== '' ? validator(name, cleanDate) : null } })\n            }\n        } else if (name === 'cardNumber') {\n            const changedNumber = value.replace(/ /g, '')\n            setCardData({ ...card, [name]: { value: changedNumber, error: changedNumber !== '' ? validator(name, changedNumber) : null } })\n        } else {\n            setCardData({ ...card, [name]: { value, error: value !== '' ? validator(name, value) : null } })\n        }\n    }\n\n    return (\n        <PaymentCard \n            btnText={btnText}\n            card={card}\n            logo={logo}\n            onBlurCardField={handleBlurCardField}\n            onChangeCardField={handleChangeCardField}\n            onSubmit={handleSubmit}\n        />\n    )\n}\n\nPaymentCardContainer.propTypes = {\n    btnText: PropTypes.string,\n    logo: PropTypes.string,\n    onSubmit: PropTypes.func,\n}\n\nexport default PaymentCardContainer","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport styled from 'styled-components'\nimport Paper from '@material-ui/core/Paper'\nimport TextField from '@material-ui/core/TextField'\nimport PropTypes from 'prop-types'\nimport countryCodes from '../../country_codes.json'\nimport PaymentMethod from '../PaymentMethod'\nimport PaymentCard from '../../containers/PaymentCard'\n\nconst StyledContainer = styled(Container)`\n    text-align: center;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nconst StyledPaper = styled(Paper)`\n    width: 100%;\n    padding: 20px;\n`\n\nconst PaymentWidget = ({\n    selectedCountry,\n    price, onCountryChange,\n    isPaymentMethodsLoading,\n    paymentMethods,\n    onChangeMethod,\n    selectedMethod,\n    onSubmitForm\n}) => (\n        <StyledContainer maxWidth=\"xs\">\n            <StyledPaper>\n                <h1>Payment Test Task</h1>\n                <h2>Price: {price}</h2>\n                <TextField\n                    select\n                    label=\"Country\"\n                    onChange={onCountryChange}\n                    value={selectedCountry}\n                    SelectProps={{\n                        native: true,\n                    }}\n                    helperText=\"Please select your country\"\n                >\n                    {countryCodes.map(country => <option key={country.code} value={country.code}>{country.name}</option>)}\n                </TextField>\n                <PaymentMethod\n                    isLoading={isPaymentMethodsLoading}\n                    paymentMethods={paymentMethods}\n                    onChangeMethod={onChangeMethod}\n                    selectedMethod={selectedMethod}\n                />\n                <PaymentCard\n                    logo={selectedMethod.value ? selectedMethod.value.img_url : undefined}\n                    onSubmit={onSubmitForm}\n                    btnText={price}\n                />\n            </StyledPaper>\n        </StyledContainer>\n    )\n\nPaymentWidget.propTypes = {\n    isPaymentMethodsLoading: PropTypes.bool,\n    onChangeMethod: PropTypes.func,\n    onCountryChange: PropTypes.func,\n    onSubmitForm: PropTypes.func,\n    paymentMethods: PropTypes.array,\n    price: PropTypes.string,\n    selectedCountry: PropTypes.string,\n    selectedMethod: PropTypes.object,\n}\n\nexport default PaymentWidget;","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport PaymentWidget from '../../components/PaymentWidget'\n\nconst PaymentWidgetContainer = ({ amount, currency }) => {\n    const [selectedCountry, setCountry] = useState('UA')\n    const [isPaymentMethodsLoading, setPaymentMethodsLoadingStatus] = useState(false)\n    const [paymentMethods, setPaymentMethods] = useState(null)\n    const [selectedMethod, setSelectedMethod] = useState({\n        value: null,\n        error: null\n    })\n\n    useEffect(() => {\n        getCountry(selectedCountry)\n        setSelectedMethod({\n            value: null,\n            error: null\n        })\n    }, [selectedCountry])\n\n    const handleChangeMethod = (method) => () => {\n        setSelectedMethod({ value: method, error: null })\n    }\n\n    const handleCountryChange = ({ target: { value }}) => {\n        setCountry(value)\n    }\n\n    const handleSubmitForm = (card) => {\n        if (!selectedMethod.value) {\n            setSelectedMethod({ ...selectedMethod, error: true })\n        }\n    }\n\n    async function getCountry(countryCode) {\n        setPaymentMethodsLoadingStatus(true)\n        setPaymentMethods(null)\n        const res = await fetch(`https://api.paymentwall.com/api/payment-systems/?key=b1ace6cb384e25a222a0da24e62167a1&country_code=${countryCode}`)\n        if (res.ok) {\n            const data = await res.json()\n            setPaymentMethods(data ? data : [])\n        } else {\n            setPaymentMethods([])\n        }\n        setPaymentMethodsLoadingStatus(false)\n    }\n\n    return (\n        <PaymentWidget\n            isPaymentMethodsLoading={isPaymentMethodsLoading}\n            onChangeMethod={handleChangeMethod}\n            onCountryChange={handleCountryChange}\n            onSubmitForm={handleSubmitForm}\n            paymentMethods={paymentMethods}\n            price={`${amount} ${currency}`}\n            selectedCountry={selectedCountry}\n            selectedMethod={selectedMethod}\n        />\n    )\n}\n\nPaymentWidget.propTypes = {\n    amount: PropTypes.number,\n    currency: PropTypes.string\n}\n\nexport default PaymentWidgetContainer","import React, { Fragment } from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createGlobalStyle } from 'styled-components';\nimport PaymentWidget from '../../containers/PaymentWidget';\n\nconst GlobalStyle = createGlobalStyle`\n    html {\n        height: 100vh;\n    }\n\n    body {\n        height: 100%;\n\n        #root {\n            height: 100%;\n        }\n    }\n`\n\nconst App = () => (\n    <Fragment>\n        <CssBaseline />\n        <GlobalStyle />\n        <PaymentWidget amount={5} currency=\"USD\" />\n    </Fragment>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}