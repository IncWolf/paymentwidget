{"version":3,"sources":["components/PaymentCard/images/card_back.jpg","components/PaymentMethod/index.js","components/PaymentCard/index.js","containers/PaymentCard/index.js","components/SuccessfulMessage/index.js","components/PaymentWidget/index.js","containers/PaymentWidget/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Wrapper","styled","div","List","Alert","PaymentMethodWrapper","PaymentMethodLabel","Label","FormHelperText","StyledCircularProgress","CircularProgress","PaymentMethod","isLoading","paymentMethods","selectedMethod","onChangeMethod","length","error","map","method","onChange","key","id","onClick","Radio","color","checked","value","name","inputProps","src","img_url","alt","renderPaymentMethod","CreditCard","Paper","cardBack","StyledTextField","TextField","Row","Grid","Logo","img","PaymentCard","card","logo","onBlurCardField","onChangeCardField","onSubmit","btnText","elevation","container","direction","item","xs","placeholder","onBlur","cardNumber","replace","helperText","className","expDate","cvv","toUpperCase","Button","type","variant","PaymentCardContainer","useState","setCardData","validator","isNaN","split","reverse","digit","Number","reduce","acc","curr","index","modValue","Date","slice","match","validateField","target","cleanDate","changedNumber","e","preventDefault","cardState","isValid","Object","entries","forEach","validateForm","ul","StyledCheckCircleIcon","CheckCircleIcon","p","SuccessfulMessage","data","fieldKey","fieldValue","StyledContainer","Container","StyledPaper","PaymentWidget","selectedCountry","price","onCountryChange","isPaymentMethodsLoading","isWidgetLoading","onSubmitForm","successfulObject","maxWidth","select","label","SelectProps","native","countryCodes","country","code","undefined","propTypes","amount","PropTypes","number","currency","string","PaymentWidgetContainer","setCountry","setPaymentMethodsLoadingStatus","setPaymentMethods","setSuccessfulObject","isCountryCodeLoading","setCountryCodeLoadingStatus","setSelectedMethod","useEffect","getCountryCode","getCountry","countryCode","a","fetch","res","ok","json","geolocation","geoData","GlobalStyle","createGlobalStyle","App","CssBaseline","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ca0710e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card_back.a22584f2.jpg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport styled from 'styled-components'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\n\r\nconst Wrapper = styled.div`\r\n    margin: 32px 0;\r\n    position: relative;\r\n    min-height: 140px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n`\r\n\r\nconst List = styled.div`\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n    overflow-y: auto;\r\n`\r\n\r\nconst Alert = styled.div`\r\n    border-left: 3px solid red;\r\n    background: rgba(255, 0, 0, .4);\r\n    padding: 30px;\r\n    text-align: left;\r\n    font-size: 16px;\r\n`\r\n\r\nconst PaymentMethodWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    border: 2px solid #a9a9a9;\r\n    border-radius: 20px;\r\n    margin: 10px 5px;\r\n    height: 80px;\r\n    align-items: center;\r\n    justify-content: center;\r\n    cursor: pointer;\r\n`\r\n\r\nconst PaymentMethodLabel = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 135px;\r\n\r\n    & > span {\r\n        font-weight: bold;\r\n        font-size: 16px;\r\n    }\r\n`\r\n\r\nconst Label = styled(FormHelperText)`\r\n    position: absolute;\r\n    top: -12px;\r\n    left: 0;\r\n`\r\n\r\nconst StyledCircularProgress = styled(CircularProgress)`\r\n    margin: 0 auto;\r\n`\r\n\r\nconst PaymentMethod = ({ isLoading, paymentMethods, selectedMethod, onChangeMethod }) => {\r\n    const renderPaymentMethod = (method, selectedMethod, onChange) => {\r\n        return (\r\n            <PaymentMethodWrapper key={method.id} onClick={onChange(method)}>\r\n                <Radio\r\n                    color=\"primary\"\r\n                    checked={selectedMethod.value !== null && selectedMethod.value.id === method.id}\r\n                    value={method.id}\r\n                    name={`radio-button-${method.id}`}\r\n                    inputProps={{ 'aria-label': method.id }}\r\n                />\r\n                <PaymentMethodLabel>\r\n                    <img src={method.img_url} alt={`${method.name} logo`} />\r\n                    <span>{method.name}</span>\r\n                </PaymentMethodLabel>\r\n            </PaymentMethodWrapper>\r\n        )\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (<Wrapper><StyledCircularProgress /></Wrapper>)\r\n    }\r\n\r\n    if (!isLoading && paymentMethods && paymentMethods.length === 0) {\r\n        return(\r\n            <Wrapper>\r\n                <Alert>\r\n                    We are sorry, but we are not provide payment methods for that country\r\n                </Alert>\r\n            </Wrapper>\r\n        )\r\n    }\r\n\r\n    if (paymentMethods) {\r\n        return (\r\n            <Wrapper>\r\n                <Label error={selectedMethod.error}>Payment method *</Label>\r\n                <div>\r\n                    <List>\r\n                        { paymentMethods.map(method => renderPaymentMethod(method, selectedMethod, onChangeMethod))}\r\n                    </List>\r\n                </div>\r\n                <FormHelperText error={selectedMethod.error}>Please choose your payment method</FormHelperText>\r\n            </Wrapper>\r\n        )\r\n    }\r\n    \r\n    return null\r\n}\r\n\r\nPaymentMethod.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n    onChangeMethod: PropTypes.func,\r\n    paymentMethods: PropTypes.array,\r\n    selectedMethod: PropTypes.object,\r\n}\r\n\r\nexport default PaymentMethod;","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport styled from 'styled-components'\r\nimport cardBack from './images/card_back.jpg'\r\n\r\nconst CreditCard = styled(Paper)`\r\n    padding: 0 20px;\r\n    background: url(${cardBack}) 100% 100% no-repeat;\r\n    height: 228px;\r\n    background-size: cover;\r\n    border-radius: 10px;\r\n    margin-bottom: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n`\r\n\r\nconst StyledTextField = styled(TextField)`\r\n    .credit_card {\r\n        text-align: center;\r\n        font-weight: bold;\r\n        font-family: 'Share Tech Mono', monospace;\r\n        font-size: 16px;\r\n\r\n        &.number_input {\r\n            font-size: 20px;\r\n        }\r\n    }\r\n`\r\n\r\nconst Row = styled(Grid)`\r\n    min-height: 70px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n`\r\n\r\nconst Logo = styled.img`\r\n    width: 100%;\r\n`\r\n\r\nconst PaymentCard = ({ card, logo, onBlurCardField, onChangeCardField, onSubmit, btnText }) => (\r\n    <form onSubmit={onSubmit}>\r\n        <CreditCard elevation={3}>\r\n            <Grid container direction=\"column\">\r\n                <Row item container>\r\n                    <Grid item xs={12}>\r\n                        <StyledTextField\r\n                            placeholder=\"0000 0000 0000 0000\"\r\n                            onChange={onChangeCardField}\r\n                            onBlur={onBlurCardField}\r\n                            name=\"cardNumber\"\r\n                            value={card.cardNumber.value.replace(/\\d{4}(?=.)/g, '$& ')}\r\n                            helperText={card.cardNumber.error ? card.cardNumber.error : 'Card number'}\r\n                            error={card.cardNumber.error && card.cardNumber.error !== null}\r\n                            inputProps={{\r\n                                className: 'credit_card number_input'\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Row>\r\n                <Row item container>\r\n                    <Grid item xs={5}>\r\n                        <StyledTextField\r\n                            placeholder=\"12/22\"\r\n                            onChange={onChangeCardField}\r\n                            onBlur={onBlurCardField}\r\n                            name=\"expDate\"\r\n                            value={card.expDate.value ? card.expDate.value.replace(/\\d{2}(?=.)/g, '$&/') : ''}\r\n                            helperText={card.expDate.error ? card.expDate.error : 'Exp date'}\r\n                            error={card.expDate.error && card.expDate.error !== null}\r\n                            inputProps={{\r\n                                className: 'credit_card expDate_input'\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={5}>\r\n                        <StyledTextField\r\n                            placeholder=\"432\"\r\n                            onChange={onChangeCardField}\r\n                            onBlur={onBlurCardField}\r\n                            name=\"cvv\"\r\n                            value={card.cvv.value}\r\n                            helperText={card.cvv.error ? card.cvv.error : 'CVV'}\r\n                            error={card.cvv.error && card.cvv.error !== null}\r\n                            inputProps={{\r\n                                className: 'credit_card cvv_input'\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Row>\r\n                <Row item container>\r\n                    <Grid item xs={6}>\r\n                        <StyledTextField\r\n                            placeholder=\"YOUR NAME\"\r\n                            onChange={onChangeCardField}\r\n                            onBlur={onBlurCardField}\r\n                            name=\"name\"\r\n                            value={card.name.value.toUpperCase()}\r\n                            helperText={card.name.error ? card.name.error : 'Cardholder name'}\r\n                            error={card.name.error && card.name.error !== null}\r\n                            inputProps={{\r\n                                className: 'credit_card name_input'\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        {logo &&\r\n                            <Logo src={logo} alt=\"credit card logo\" />\r\n                        }\r\n                    </Grid>\r\n                </Row>\r\n            </Grid>\r\n        </CreditCard>\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">Pay {btnText}</Button>\r\n    </form>\r\n);\r\n\r\nPaymentCard.propTypes = {\r\n    btnText: PropTypes.string,\r\n    card: PropTypes.object,\r\n    logo: PropTypes.string,\r\n    onBlurCardField: PropTypes.func,\r\n    onChangeCardField: PropTypes.func,\r\n    onSubmit: PropTypes.func,\r\n}\r\n\r\nexport default PaymentCard;","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport PaymentCard from '../../components/PaymentCard'\r\n\r\nconst PaymentCardContainer = ({ logo, onSubmit, btnText }) => {\r\n    const [card, setCardData] = useState({\r\n        name: {\r\n            value: '',\r\n            error: null,\r\n        },\r\n        cardNumber: {\r\n            value: '',\r\n            error: null,\r\n        },\r\n        expDate: {\r\n            value: '',\r\n            error: null,\r\n        },\r\n        cvv: {\r\n            value: '',\r\n            error: null,\r\n        },\r\n    })\r\n\r\n    const validator = (name, value) => {\r\n        switch (name) {\r\n            case 'cardNumber':\r\n                if (!isNaN(value)) {\r\n                    const arrayOfDigits = value.split('').reverse().map(digit => Number(digit));\r\n                    const sum = arrayOfDigits.reduce((acc, curr, index) => {\r\n                        if (index % 2 !== 0) {\r\n                            const modValue = curr * 2\r\n                            return modValue > 9 ? acc + modValue - 9 : acc + modValue\r\n                        } else {\r\n                            return acc + curr\r\n                        }\r\n                    })\r\n                    return sum % 10 !== 0 ? 'Cardnumber is not valid' : null\r\n                } else {\r\n                    return 'Only digits allowed'\r\n                }\r\n            case 'expDate':\r\n                if (isNaN(value) || new Date('20' + value.slice(2), value.slice(0, 2) - 1) < new Date()) {\r\n                    return 'Exp. date incorrect'\r\n                }\r\n                return null\r\n            case 'cvv':\r\n                return isNaN(value) ? 'Only digits' : null\r\n            case 'name':\r\n                return value.match(/^[A-Za-z ]+$/) ? null : 'Only characters allowed'\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n    const validateForm = () => {\r\n        const cardState = { ...card }\r\n        let isValid = true\r\n        Object.entries(card).forEach(([key, value]) => {\r\n            const error = validateField(key)\r\n            if (error) {\r\n                isValid = false\r\n            }\r\n            cardState[key] = { ...value, error }\r\n        })\r\n        setCardData(cardState)\r\n        return isValid\r\n    }\r\n\r\n    const validateField = (key) => {\r\n        return card[key].value !== '' ? validator(key, card[key].value) : 'Required'\r\n    }\r\n\r\n    const handleBlurCardField = ({ target: { name } }) => {\r\n        const error = validateField(name)\r\n        setCardData({...card, [name]: { ...card[name], error } })\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (validateForm()) {\r\n            onSubmit({\r\n                name: card.name.value,\r\n                cvv: card.cvv.value,\r\n                expDate: card.expDate.value,\r\n                cardNumber: card.cardNumber.value,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleChangeCardField = ({ target: { name, value } }) => {\r\n        if (name === 'expDate') {\r\n            if (value.length <= 5) {\r\n                const cleanDate = value.replace('/', '')\r\n                setCardData({ ...card, [name]: { value: cleanDate, error: cleanDate !== '' ? validator(name, cleanDate) : null } })\r\n            }\r\n        } else if (name === 'cardNumber') {\r\n            const changedNumber = value.replace(/ /g, '')\r\n            setCardData({ ...card, [name]: { value: changedNumber, error: changedNumber !== '' ? validator(name, changedNumber) : null } })\r\n        } else {\r\n            setCardData({ ...card, [name]: { value, error: value !== '' ? validator(name, value) : null } })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PaymentCard \r\n            btnText={btnText}\r\n            card={card}\r\n            logo={logo}\r\n            onBlurCardField={handleBlurCardField}\r\n            onChangeCardField={handleChangeCardField}\r\n            onSubmit={handleSubmit}\r\n        />\r\n    )\r\n}\r\n\r\nPaymentCardContainer.propTypes = {\r\n    btnText: PropTypes.string,\r\n    logo: PropTypes.string,\r\n    onSubmit: PropTypes.func,\r\n}\r\n\r\nexport default PaymentCardContainer","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst List = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n    text-align: left;\r\n    background: #ececec;\r\n    padding: 30px;\r\n    font-family: monospace;\r\n    font-size: 16px;\r\n`\r\n\r\nconst StyledCheckCircleIcon = styled(CheckCircleIcon)`\r\n    color: green;\r\n    font-size: 100px;\r\n`\r\n\r\nconst Alert = styled.p`\r\n    padding: 30px;\r\n    background: rgba(0, 255, 0, .4);\r\n    border-left: 3px solid green;\r\n    text-align: left;\r\n    font-size: 16px;\r\n`\r\n\r\nconst SuccessfulMessage = ({ data }) => (\r\n    <div>\r\n        <StyledCheckCircleIcon />\r\n        <h1>Success!</h1>\r\n        <Alert>You just successfully fill out test card form and get that fancy message!</Alert>\r\n        <List>\r\n            { Object.entries(data).map(([fieldKey, fieldValue]) => <li><strong>{fieldKey}:</strong> {fieldValue}</li>)}\r\n        </List>\r\n    </div>\r\n)\r\n\r\nSuccessfulMessage.propTypes = {\r\n    data: PropTypes.object\r\n}\r\n\r\nexport default SuccessfulMessage","import React from 'react'\r\nimport Container from '@material-ui/core/Container'\r\nimport styled from 'styled-components'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport PropTypes from 'prop-types'\r\nimport countryCodes from '../../country_codes.json'\r\nimport PaymentMethod from '../PaymentMethod'\r\nimport PaymentCard from '../../containers/PaymentCard'\r\nimport SuccessfulMessage from '../SuccessfulMessage'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\n\r\nconst StyledContainer = styled(Container)`\r\n    text-align: center;\r\n    height: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nconst StyledPaper = styled(Paper)`\r\n    width: 100%;\r\n    padding: 20px;\r\n`\r\n\r\nconst PaymentWidget = ({\r\n    selectedCountry,\r\n    price,\r\n    onCountryChange,\r\n    isPaymentMethodsLoading,\r\n    isWidgetLoading,\r\n    paymentMethods,\r\n    onChangeMethod,\r\n    selectedMethod,\r\n    onSubmitForm,\r\n    successfulObject,\r\n}) => {\r\n    if (isWidgetLoading) {\r\n        return (\r\n            <StyledContainer maxWidth=\"xs\">\r\n                <StyledPaper>\r\n                    <CircularProgress />\r\n                </StyledPaper>\r\n            </StyledContainer>\r\n        )\r\n    }\r\n\r\n    if (successfulObject) {\r\n        return (\r\n            <StyledContainer maxWidth=\"xs\">\r\n                <StyledPaper>\r\n                    <SuccessfulMessage data={successfulObject} />\r\n                </StyledPaper>\r\n            </StyledContainer>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <StyledContainer maxWidth=\"xs\">\r\n            <StyledPaper>\r\n                <h1>Payment Test Task</h1>\r\n                <h2>Price: {price}</h2>\r\n                <TextField\r\n                    select\r\n                    label=\"Country\"\r\n                    onChange={onCountryChange}\r\n                    value={selectedCountry}\r\n                    SelectProps={{\r\n                        native: true,\r\n                    }}\r\n                    helperText=\"Please select your country\"\r\n                >\r\n                    {countryCodes.map(country => <option key={country.code} value={country.code}>{country.name}</option>)}\r\n                </TextField>\r\n                <PaymentMethod\r\n                    isLoading={isPaymentMethodsLoading}\r\n                    paymentMethods={paymentMethods}\r\n                    onChangeMethod={onChangeMethod}\r\n                    selectedMethod={selectedMethod}\r\n                />\r\n                <PaymentCard\r\n                    logo={selectedMethod.value ? selectedMethod.value.img_url : undefined}\r\n                    onSubmit={onSubmitForm}\r\n                    btnText={price}\r\n                />\r\n            </StyledPaper>\r\n        </StyledContainer>\r\n    )\r\n}\r\n\r\nPaymentWidget.propTypes = {\r\n    isPaymentMethodsLoading: PropTypes.bool,\r\n    isWidgetLoading: PropTypes.bool,\r\n    onChangeMethod: PropTypes.func,\r\n    onCountryChange: PropTypes.func,\r\n    onSubmitForm: PropTypes.func,\r\n    paymentMethods: PropTypes.array,\r\n    price: PropTypes.string,\r\n    selectedCountry: PropTypes.string,\r\n    selectedMethod: PropTypes.object,\r\n    successfulObject: PropTypes.object,\r\n}\r\n\r\nexport default PaymentWidget;","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport PaymentWidget from '../../components/PaymentWidget'\r\n\r\nconst PaymentWidgetContainer = ({ amount, currency }) => {\r\n    const [selectedCountry, setCountry] = useState('UA')\r\n    const [isPaymentMethodsLoading, setPaymentMethodsLoadingStatus] = useState(false)\r\n    const [paymentMethods, setPaymentMethods] = useState(null)\r\n    const [successfulObject, setSuccessfulObject] = useState(null)\r\n    const [isCountryCodeLoading, setCountryCodeLoadingStatus] = useState(false)\r\n    const [selectedMethod, setSelectedMethod] = useState({\r\n        value: null,\r\n        error: null\r\n    })\r\n    \r\n    useEffect(() => {\r\n        getCountryCode()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getCountry(selectedCountry)\r\n        setSelectedMethod({\r\n            value: null,\r\n            error: null\r\n        })\r\n    }, [selectedCountry])\r\n\r\n    const handleChangeMethod = (method) => () => {\r\n        setSelectedMethod({ value: method, error: null })\r\n    }\r\n\r\n    const handleCountryChange = ({ target: { value }}) => {\r\n        setCountry(value)\r\n    }\r\n\r\n    const handleSubmitForm = (card) => {\r\n        if (!selectedMethod.value) {\r\n            setSelectedMethod({ ...selectedMethod, error: true })\r\n        } else {\r\n            setSuccessfulObject({...card, method: selectedMethod.value.name, countryCode: selectedCountry })\r\n        }\r\n    }\r\n\r\n    async function getCountry(countryCode) {\r\n        setPaymentMethodsLoadingStatus(true)\r\n        setPaymentMethods(null)\r\n        const res = await fetch(`https://api.paymentwall.com/api/payment-systems/?key=b1ace6cb384e25a222a0da24e62167a1&country_code=${countryCode}`)\r\n        if (res.ok) {\r\n            const data = await res.json()\r\n            setPaymentMethods(data ? data : [])\r\n        } else {\r\n            setPaymentMethods([])\r\n        }\r\n        setPaymentMethodsLoadingStatus(false)\r\n    }\r\n\r\n    async function getCountryCode() {\r\n        setCountryCodeLoadingStatus(true)\r\n        const geolocation = await fetch(`http://ip-api.com/json`)\r\n        if (geolocation.ok) {\r\n            const geoData = await geolocation.json()\r\n            setCountry(geoData.countryCode)\r\n        }\r\n        setCountryCodeLoadingStatus(false)\r\n    }\r\n\r\n    return (\r\n        <PaymentWidget\r\n            isPaymentMethodsLoading={isPaymentMethodsLoading}\r\n            isWidgetLoading={isCountryCodeLoading}\r\n            onChangeMethod={handleChangeMethod}\r\n            onCountryChange={handleCountryChange}\r\n            onSubmitForm={handleSubmitForm}\r\n            paymentMethods={paymentMethods}\r\n            price={`${amount} ${currency}`}\r\n            selectedCountry={selectedCountry}\r\n            selectedMethod={selectedMethod}\r\n            successfulObject={successfulObject}\r\n        />\r\n    )\r\n}\r\n\r\nPaymentWidget.propTypes = {\r\n    amount: PropTypes.number,\r\n    currency: PropTypes.string\r\n}\r\n\r\nexport default PaymentWidgetContainer","import React, { Fragment } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport PaymentWidget from '../../containers/PaymentWidget';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100vh;\r\n    }\r\n\r\n    body {\r\n        height: 100%;\r\n\r\n        #root {\r\n            height: 100%;\r\n        }\r\n    }\r\n`\r\n\r\nconst App = () => (\r\n    <Fragment>\r\n        <CssBaseline />\r\n        <GlobalStyle />\r\n        <PaymentWidget amount={5} currency=\"USD\" />\r\n    </Fragment>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}